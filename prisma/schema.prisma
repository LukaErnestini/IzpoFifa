generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas   = ["public"]
}

model Attempt {
  id                                Int     @id @default(autoincrement())
  time                              Int
  distance                          Float?
  x                                 Float?
  y                                 Float?
  goal                              Boolean @default(false)
  autogoal                          Boolean @default(false)
  penalty                           Boolean @default(false)
  onTarget                          Boolean @default(false)
  shooterId                         Int
  gameId                            Int
  assistedId                        Int?
  goalieId                          Int?
  Player_Attempt_assistedIdToPlayer Player? @relation("Attempt_assistedIdToPlayer", fields: [assistedId], references: [id])
  Game                              Game    @relation(fields: [gameId], references: [id])
  Player_Attempt_goalieIdToPlayer   Player? @relation("Attempt_goalieIdToPlayer", fields: [goalieId], references: [id])
  Player_Attempt_shooterIdToPlayer  Player  @relation("Attempt_shooterIdToPlayer", fields: [shooterId], references: [id])

  @@schema("public")
}

model Foul {
  id       Int     @id @default(autoincrement())
  card     String?
  time     Int?
  x        Float?
  y        Float?
  gameId   Int
  playerId Int
  Game     Game    @relation(fields: [gameId], references: [id])
  Player   Player  @relation(fields: [playerId], references: [id])

  @@schema("public")
}

model Game {
  id                       Int       @id @default(autoincrement())
  date                     DateTime  @default(now())
  gamedayId                Int?
  scoreTeamA               Int       @default(0)
  scoreTeamB               Int       @default(0)
  teamAId                  Int
  teamBId                  Int
  winnerId                 Int?
  finished                 Boolean   @default(false)
  Attempt                  Attempt[]
  Foul                     Foul[]
  Gameday                  Gameday?  @relation(fields: [gamedayId], references: [id])
  Team_Game_teamAIdToTeam  Team      @relation("Game_teamAIdToTeam", fields: [teamAId], references: [id])
  Team_Game_teamBIdToTeam  Team      @relation("Game_teamBIdToTeam", fields: [teamBId], references: [id])
  Team_Game_winnerIdToTeam Team?     @relation("Game_winnerIdToTeam", fields: [winnerId], references: [id])

  @@schema("public")
}

model Gameday {
  id        Int      @id @default(autoincrement())
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  userId    String
  Game      Game[]
  Player    Player[]

  @@schema("public")
}

model Player {
  id                                 Int       @id @default(autoincrement())
  name                               String    
  imageUri                           String?
  userId                             String
  Attempt_Attempt_assistedIdToPlayer Attempt[] @relation("Attempt_assistedIdToPlayer")
  Attempt_Attempt_goalieIdToPlayer   Attempt[] @relation("Attempt_goalieIdToPlayer")
  Attempt_Attempt_shooterIdToPlayer  Attempt[] @relation("Attempt_shooterIdToPlayer")
  Foul                               Foul[]
  Gameday                            Gameday[]
  Team                               Team[]

  @@schema("public")
}

model Team {
  id                       Int      @id @default(autoincrement())
  name                     String?
  color                    String?
  Game_Game_teamAIdToTeam  Game[]   @relation("Game_teamAIdToTeam")
  Game_Game_teamBIdToTeam  Game[]   @relation("Game_teamBIdToTeam")
  Game_Game_winnerIdToTeam Game[]   @relation("Game_winnerIdToTeam")
  Player                   Player[]
  userId  String

  @@schema("public")
}
